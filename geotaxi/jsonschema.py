# File generated by the command `geotaxi-generate-jsonschema`, do not edit by yourself
# To modify it, edit API_SCHEMA variable in geotaxi/jsonschema_definition.py and the run `geotaxi-generate-jsonschema

VERSION = "2.15.0"
from fastjsonschema import JsonSchemaValueException


NoneType = type(None)

def validate(data):
    if not isinstance(data, (dict)):
        raise JsonSchemaValueException("data must be object", value=data, name="data", definition={'type': 'object', 'properties': {'operator': {'type': 'string'}, 'lat': {'type': ['number', 'string']}, 'device': {'type': 'string'}, 'lon': {'type': ['number', 'string']}, 'timestamp': {'type': ['number', 'string']}, 'status': {'type': 'string'}, 'version': {'type': ['number', 'string']}, 'taxi': {'type': 'string'}, 'hash': {'type': 'string'}}, 'required': ['operator', 'lat', 'device', 'lon', 'timestamp', 'status', 'version', 'taxi', 'hash']}, rule='type')
    data_is_dict = isinstance(data, dict)
    if data_is_dict:
        data_len = len(data)
        if not all(prop in data for prop in ['operator', 'lat', 'device', 'lon', 'timestamp', 'status', 'version', 'taxi', 'hash']):
            raise JsonSchemaValueException("data must contain ['operator', 'lat', 'device', 'lon', 'timestamp', 'status', 'version', 'taxi', 'hash'] properties", value=data, name="data", definition={'type': 'object', 'properties': {'operator': {'type': 'string'}, 'lat': {'type': ['number', 'string']}, 'device': {'type': 'string'}, 'lon': {'type': ['number', 'string']}, 'timestamp': {'type': ['number', 'string']}, 'status': {'type': 'string'}, 'version': {'type': ['number', 'string']}, 'taxi': {'type': 'string'}, 'hash': {'type': 'string'}}, 'required': ['operator', 'lat', 'device', 'lon', 'timestamp', 'status', 'version', 'taxi', 'hash']}, rule='required')
        data_keys = set(data.keys())
        if "operator" in data_keys:
            data_keys.remove("operator")
            data__operator = data["operator"]
            if not isinstance(data__operator, (str)):
                raise JsonSchemaValueException("data.operator must be string", value=data__operator, name="data.operator", definition={'type': 'string'}, rule='type')
        if "lat" in data_keys:
            data_keys.remove("lat")
            data__lat = data["lat"]
            if not isinstance(data__lat, (int, float, str)) or isinstance(data__lat, bool):
                raise JsonSchemaValueException("data.lat must be number or string", value=data__lat, name="data.lat", definition={'type': ['number', 'string']}, rule='type')
        if "device" in data_keys:
            data_keys.remove("device")
            data__device = data["device"]
            if not isinstance(data__device, (str)):
                raise JsonSchemaValueException("data.device must be string", value=data__device, name="data.device", definition={'type': 'string'}, rule='type')
        if "lon" in data_keys:
            data_keys.remove("lon")
            data__lon = data["lon"]
            if not isinstance(data__lon, (int, float, str)) or isinstance(data__lon, bool):
                raise JsonSchemaValueException("data.lon must be number or string", value=data__lon, name="data.lon", definition={'type': ['number', 'string']}, rule='type')
        if "timestamp" in data_keys:
            data_keys.remove("timestamp")
            data__timestamp = data["timestamp"]
            if not isinstance(data__timestamp, (int, float, str)) or isinstance(data__timestamp, bool):
                raise JsonSchemaValueException("data.timestamp must be number or string", value=data__timestamp, name="data.timestamp", definition={'type': ['number', 'string']}, rule='type')
        if "status" in data_keys:
            data_keys.remove("status")
            data__status = data["status"]
            if not isinstance(data__status, (str)):
                raise JsonSchemaValueException("data.status must be string", value=data__status, name="data.status", definition={'type': 'string'}, rule='type')
        if "version" in data_keys:
            data_keys.remove("version")
            data__version = data["version"]
            if not isinstance(data__version, (int, float, str)) or isinstance(data__version, bool):
                raise JsonSchemaValueException("data.version must be number or string", value=data__version, name="data.version", definition={'type': ['number', 'string']}, rule='type')
        if "taxi" in data_keys:
            data_keys.remove("taxi")
            data__taxi = data["taxi"]
            if not isinstance(data__taxi, (str)):
                raise JsonSchemaValueException("data.taxi must be string", value=data__taxi, name="data.taxi", definition={'type': 'string'}, rule='type')
        if "hash" in data_keys:
            data_keys.remove("hash")
            data__hash = data["hash"]
            if not isinstance(data__hash, (str)):
                raise JsonSchemaValueException("data.hash must be string", value=data__hash, name="data.hash", definition={'type': 'string'}, rule='type')
    return data